import ru.uxair.flight_service.service.DestinationService;
import java.util.List;

@RestController
@RequestMapping("api/destinations")

public class DestinationControllerImpl implements DestinationController{

    private final DestinationService destinationService;
    private final DestinationMapper destinationMapper;

    public DestinationControllerImpl(DestinationService destinationService,DestinationMapper destinationMapper) {
        this.destinationService = destinationService;
        this.destinationMapper = destinationMapper;
    }


    @Override
    ResponseEntity <DestinationDto> getAllDestination (){
        return ;
    }

    @Override
    public Destination getDestinationById (@PathVariable(value="id") String id) {
     return ResponseEntity.ok(destintionMapper.convertTodestinationDto(destinationService.getDestination(id)));
    }

    @Override
      public ResponseEntity <DestinationDto>  getDestinationByCity (@PathVariable (value="city") String city) {
        return null;
    }
    
        @Override
      public ResponseEntity <DestinationDto>  getDestinationByCountry (@PathVariable (value="countryName") String countryName) {
        return null;
    }

    @Override
         ResponseEntity <HttpStatus> createDestination (@Parameter(description = "destinationDto", required = true)
                                               @RequestBody @Valid DestinationDto destinationDto) {
        return null;
    }

    @Override
    ResponseEntity <HttpStatus> createDestination (@Parameter(description = "destinationDto", required = true)
                                               @RequestBody @Valid DestinationDto destinationDto) {
        return null;
    }

    @Override
    ResponseEntity<HttpStatus> updateDestination (@Parameter(description = "Unique identifier of airport", required = true)
            @NonNull @PathVariable("id") String id,
            @Parameter(description = "DestinationDTO", required = true)
            @RequestBody @Valid DestinationDto destinationDto) {
        return null;
    }

    @Override
    ResponseEntity<HttpStatus> deleteDestination (@NonNull @PathVariable("id")
                                                  @Parameter(description = "Unique identifier of passenger") String id)) {

    }
}

    /*@GetMapping

    public ResponseEntity <List<Destination>> getAllDestinations() {
        List<Destination> destination = destinationService.findAll();
        return new ResponseEntity<>(destination, HttpStatus.OK);
    }

    @GetMapping("/{id}")
    public ResponseEntity <Destination> getDestinationById(@PathVariable("id") Long id) {
        Destination destination = destinationService.findById(id);
        return new ResponseEntity<>(destination, HttpStatus.OK);
    }

    @GetMapping("/{city}")
    public ResponseEntity <Destination> getDestinationByCity(@PathVariable("city") String city) {
        Destination destination = destinationService.findByCity(city);
        return new ResponseEntity<>(destination, HttpStatus.OK);
    }

    @GetMapping("/{countryName}")
    public ResponseEntity <Destination> getDestinationByCountryName(@PathVariable("countryName") String countryName) {
        Destination destination = destinationService.findByCountryName(countryName);
        return new ResponseEntity<>(destination, HttpStatus.OK);
    }

    @PostMapping
    public ResponseEntity<HttpStatus> addDestination(@RequestBody Destination destination) {
        destinationService.saveDestination(destination);
        return new ResponseEntity<>(HttpStatus.OK);
    }
    @PatchMapping("/{id}")
    public ResponseEntity<HttpStatus> editDestination(@RequestBody Destination destination) {
        destinationService.updateDestination(destination);
        return new ResponseEntity<>(HttpStatus.OK);
    }
    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteDestination(@PathVariable("id") Long id)  {
        destinationService.deleteDestination(id);
        return new ResponseEntity<>(HttpStatus.OK);
    }
}
